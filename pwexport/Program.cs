using System;
using System.Data.SQLite;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("PWB 文件导出工具 - Clover Yan");
        Console.WriteLine($"Version: {System.Reflection.Assembly.GetExecutingAssembly().GetName().Version}");
        Console.WriteLine("更多信息请访问： https://www.khyan.top/apps/pwexport");
        Console.WriteLine();
        Console.WriteLine("请将要导出到的目标文件夹拖放到此窗口，或手动填入路径（建议使用空文件夹）：");
        string selectedFolder = Console.ReadLine().Trim('\"').Trim('\'');

        if (!string.IsNullOrEmpty(selectedFolder))
        {
            if (!Directory.Exists(selectedFolder))
            {
                if (AskYesNo("文件夹不存在。你想要创建它吗？"))
                {
                    Directory.CreateDirectory(selectedFolder);
                }
                else
                {
                    Console.WriteLine("发生错误：文件夹不存在。");
                    return;
                }
            }

            Console.WriteLine("准备开始导出。请确保你已经完成以下工作：");
            Console.WriteLine("1. 下载最新的 PWB 备份文件，并把后缀名改成 7z；");
            Console.WriteLine("2. 使用 7-Zip 或其他压缩软件解压备份文件；");
            Console.WriteLine("3. 找到解压后的文件夹，里面应该有一个后缀名为 db 的数据库文件。");
            Console.WriteLine();
            Console.WriteLine("请将数据库文件拖放到此窗口，或手动填入路径：");
            string dbPath = Console.ReadLine().Trim('\"').Trim('\'');

            if (!File.Exists(dbPath))
            {
                Console.WriteLine("发生错误：数据库文件不存在。");
                return;
            }

            using (var connection = new SQLiteConnection($"Data Source={dbPath};Version=3;"))
            {
                connection.Open();
                var command = new SQLiteCommand("SELECT name, id FROM Folder WHERE deleted=0 AND id IS NOT 'PW_Trash'", connection);
                var reader = command.ExecuteReader();

                var bookList = new List<(string id, string name)>();
                while (reader.Read())
                {
                    bookList.Add((reader["id"].ToString(), reader["name"].ToString()));
                }

                bool exportDirectory = AskYesNo("是否导出篇章目录？");
                bool appendNumber = AskYesNo("在文件名中附加编号？");

                StreamWriter tocWriter = null;
                if (exportDirectory)
                {
                    tocWriter = new StreamWriter(Path.Combine(selectedFolder, "toc.html"), append: true);
                    tocWriter.WriteLine("<!DOCTYPE html><html><head><meta charset=\"utf-8\"><title>Table of Contents</title></head><body>");
                    tocWriter.WriteLine($"<h1>Generated by <a href=\"https://www.khyan.top/apps/pwexport\">PWB File Exporter v{System.Reflection.Assembly.GetExecutingAssembly().GetName().Version}</a> on {DateTime.Now}</h1>");
                    tocWriter.WriteLine($"<h1>{selectedFolder}</h1>");
                }

                foreach (var book in bookList)
                {
                    int chapterNumber = 0;
                    string currentDirectory = Path.Combine(selectedFolder, book.name);
                    Directory.CreateDirectory(currentDirectory);

                    if (exportDirectory)
                    {
                        tocWriter.WriteLine($"<h2>{book.name}</h2>");
                    }

                    command = new SQLiteCommand($"SELECT title, extension, rank, content FROM Article WHERE deleted=0 AND folderId='{book.id}' UNION ALL SELECT name AS title, 'cat' AS extension, rank, '' AS content FROM Category WHERE deleted=0 AND folderId='{book.id}' ORDER BY rank", connection);
                    reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        string title = reader["title"].ToString();
                        string extension = reader["extension"].ToString();
                        string content = reader["content"].ToString();

                        if (extension == "cat")
                        {
                            currentDirectory = Path.Combine(selectedFolder, book.name, SanitizeFileName(title));
                            Directory.CreateDirectory(currentDirectory);

                            if (exportDirectory)
                            {
                                tocWriter.WriteLine($"<h3>{title}</h3>");
                            }

                            if (appendNumber)
                            {
                                chapterNumber = 0;
                            }
                        }
                        else
                        {
                            string fileName = SanitizeFileName(title);
                            if (appendNumber)
                            {
                                chapterNumber++;
                                fileName = $"{chapterNumber}. {fileName}";
                            }

                            string filePath = Path.Combine(currentDirectory, fileName + (extension == "txt" ? ".txt" : ".md"));
                            if (File.Exists(filePath))
                            {
                                int k = 0;
                                while (File.Exists(Path.Combine(currentDirectory, $"{fileName}_{k}{(extension == "txt" ? ".txt" : ".md")}")))
                                {
                                    k++;
                                }
                                fileName = $"{fileName}_{k}";
                                filePath = Path.Combine(currentDirectory, fileName + (extension == "txt" ? ".txt" : ".md"));
                            }

                            File.WriteAllText(filePath, content);

                            if (exportDirectory)
                            {
                                string link = System.Web.HttpUtility.HtmlEncode(filePath.Replace(selectedFolder, "").TrimStart(Path.DirectorySeparatorChar)).Replace("?", "%3F");
                                tocWriter.WriteLine($"<p>{(extension == "txt" ? "📄" : "📝")} <a href=\"{link}\">{System.Web.HttpUtility.HtmlEncode(title)}</a></p>");
                            }
                        }
                    }
                }

                if (exportDirectory)
                {
                    tocWriter.WriteLine("</body></html>");
                    tocWriter.Close();
                }

                connection.Close();
            }

            Console.WriteLine("完成。");
        }
    }

    static bool AskYesNo(string question)
    {
        string answer;
        do {
            Console.WriteLine($"{question} (y/n)");
            answer = Console.ReadLine().ToLower();
        } while (answer != "y" && answer != "n" && answer != "yes" && answer != "no");
        return answer == "y" || answer == "yes";
    }

    static string SanitizeFileName(string fileName)
    {
        foreach (char c in Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }
        return fileName;
    }
}
